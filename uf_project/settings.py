"""
Django settings for uf_project project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()  # Carrega variáveis do arquivo .env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# É uma boa prática carregar a SECRET_KEY de uma variável de ambiente
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', '%ojn@qc7t7m7k8-05n))jqj+arov!wg@(63j^-uerai+w^kne5')

# SECURITY WARNING: don't run with debug turned on in production!
# Converta para booleano, pois getenv retorna string. 'False' como string é True.
DEBUG_ENV = os.getenv('DJANGO_DEBUG', 'True')
DEBUG = DEBUG_ENV.lower() in ['true', '1', 't']


# Se estiver usando Render, adicione o host do seu serviço aqui.
# Exemplo: ['your-service-name.onrender.com', 'localhost', '127.0.0.1']
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
# Se DJANGO_ALLOWED_HOSTS não estiver definido, o padrão será ['localhost', '127.0.0.1']
if not os.getenv('DJANGO_ALLOWED_HOSTS'):
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'dpg-d19jatngi27c73cu3nig-a.oregon-postgres.render.com']
    # Para o host do banco de dados, se for acessado diretamente pela web,
    # mas geralmente o ALLOWED_HOSTS é para os hosts que servem a aplicação Django.
    # O host do Render para a aplicação seria algo como 'uf-ia.onrender.com' (exemplo)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',       # Adicionado
    'drf_yasg',             # Adicionado
    'core',                 # Adicionado
    'api_uf',               # Adicionado
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'uf_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uf_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# Corrigido de ATABASES para DATABASES
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'uf_ia'),
        'USER': os.getenv('DB_USER', 'admin_uf'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'noVaMWo2vzU7JsK9271fcD2QqtLbKcch'),
        'HOST': os.getenv('DB_HOST', 'dpg-d19jatngi27c73cu3nig-a.oregon-postgres.render.com'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'TEST':{
            'NAME':'2_test_uf_ia'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'pt-br' # Alterado para português do Brasil
TIME_ZONE = 'America/Sao_Paulo' # Alterado para fuso horário de São Paulo

USE_I18N = True

USE_L10N = True # Django 3.1 usa USE_L10N, para Django 4.0+ seria FORMAT_MODULE_PATH
                # Mas como o projeto foi gerado com Django 3.1.6, USE_L10N está correto.

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Adicionado para coleta de estáticos em produção

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
# Embora seu projeto seja 3.1.6, é uma boa prática definir isso para projetos futuros ou se atualizar.
# Para Django 3.1, isso não é estritamente necessário, mas não prejudica.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'uf_project.log', # Salvar log na raiz do projeto
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'bo': { # Logger específico para nosso módulo BO
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'api_uf': { # Logger específico para nossa app api_uf
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
}